{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/Octavian/Desktop/Dev/planitly-frontend/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"C:/Users/Octavian/Desktop/Dev/planitly-frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport axios from 'axios';\nimport create from 'zustand';\nimport { BACKEND_URI } from './constants';\nexport var useAuthStore = create(function (set) {\n  return {\n    auth: {\n      loading: false\n    },\n    setLoading: function setLoading(loading) {\n      return set({\n        auth: {\n          loading: loading\n        }\n      });\n    }\n  };\n});\nexport var useUserState = create(function (set) {\n  return {\n    user: undefined,\n    getUser: function () {\n      var _getUser = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var _yield$axios$get, user;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return axios.get(\"\".concat(BACKEND_URI, \"/users\"));\n\n              case 2:\n                _yield$axios$get = _context.sent;\n                user = _yield$axios$get.data;\n                set({\n                  user: user\n                });\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function getUser() {\n        return _getUser.apply(this, arguments);\n      }\n\n      return getUser;\n    }(),\n    updateUser: function () {\n      var _updateUser = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(user) {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                set({\n                  user: user\n                });\n\n              case 1:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function updateUser(_x) {\n        return _updateUser.apply(this, arguments);\n      }\n\n      return updateUser;\n    }()\n  };\n});","map":{"version":3,"sources":["C:/Users/Octavian/Desktop/Dev/planitly-frontend/src/lib/store.ts"],"names":["axios","create","BACKEND_URI","useAuthStore","set","auth","loading","setLoading","useUserState","user","undefined","getUser","get","data","updateUser"],"mappings":";;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,SAAnB;AACA,SAASC,WAAT,QAA4B,aAA5B;AASA,OAAO,IAAMC,YAAY,GAAGF,MAAM,CAAY,UAAAG,GAAG;AAAA,SAAK;AACpDC,IAAAA,IAAI,EAAE;AACJC,MAAAA,OAAO,EAAE;AADL,KAD8C;AAIpDC,IAAAA,UAAU,EAAE,oBAAAD,OAAO;AAAA,aACjBF,GAAG,CAAC;AACFC,QAAAA,IAAI,EAAE;AACJC,UAAAA,OAAO,EAAEA;AADL;AADJ,OAAD,CADc;AAAA;AAJiC,GAAL;AAAA,CAAf,CAA3B;AAkBP,OAAO,IAAME,YAAY,GAAGP,MAAM,CAAY,UAAAG,GAAG;AAAA,SAAK;AACpDK,IAAAA,IAAI,EAAEC,SAD8C;AAEpDC,IAAAA,OAAO;AAAA,8EAAE;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACsBX,KAAK,CAACY,GAAN,WAAaV,WAAb,YADtB;;AAAA;AAAA;AACOO,gBAAAA,IADP,oBACCI,IADD;AAEPT,gBAAAA,GAAG,CAAC;AAAEK,kBAAAA,IAAI,EAAEA;AAAR,iBAAD,CAAH;;AAFO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAF;;AAAA;AAAA;AAAA;;AAAA;AAAA,OAF6C;AAMpDK,IAAAA,UAAU;AAAA,iFAAE,kBAAOL,IAAP;AAAA;AAAA;AAAA;AAAA;AACVL,gBAAAA,GAAG,CAAC;AAAEK,kBAAAA,IAAI,EAAEA;AAAR,iBAAD,CAAH;;AADU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAF;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAN0C,GAAL;AAAA,CAAf,CAA3B","sourcesContent":["import User from '@/interfaces/user';\nimport axios from 'axios';\nimport create from 'zustand';\nimport { BACKEND_URI } from './constants';\n\ntype AuthState = {\n  auth: {\n    loading: boolean;\n  };\n  setLoading: (loading: boolean) => void;\n};\n\nexport const useAuthStore = create<AuthState>(set => ({\n  auth: {\n    loading: false,\n  },\n  setLoading: loading =>\n    set({\n      auth: {\n        loading: loading,\n      },\n    }),\n}));\n\ntype UserState = {\n  user: User | undefined;\n  getUser: () => Promise<void>;\n  updateUser: () => Promise<void>;\n};\n\nexport const useUserState = create<UserState>(set => ({\n  user: undefined,\n  getUser: async () => {\n    const { data: user } = await axios.get(`${BACKEND_URI}/users`);\n    set({ user: user });\n  },\n  updateUser: async (user: User) => {\n    set({ user: user });\n  },\n}));\n"]},"metadata":{},"sourceType":"module"}