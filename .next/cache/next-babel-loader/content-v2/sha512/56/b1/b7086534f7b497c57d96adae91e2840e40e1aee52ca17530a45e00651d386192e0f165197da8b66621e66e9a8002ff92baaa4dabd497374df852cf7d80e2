{"ast":null,"code":"import axios from 'axios';\nimport create from 'zustand';\nimport { BACKEND_URI } from './constants';\nimport { fetchUser } from './fetchApi';\nexport const useAuthStore = create(set => ({\n  auth: {\n    loading: false\n  },\n  setLoading: loading => set({\n    auth: {\n      loading: loading\n    }\n  })\n}));\nexport const useUserState = create(set => ({\n  user: undefined,\n  getUser: async () => {\n    const {\n      data: user\n    } = await axios.get(`${BACKEND_URI}/users`);\n    set({\n      user: user\n    });\n  },\n  updateUser: async () => {\n    const user = await fetchUser();\n    set({\n      user: user\n    });\n  }\n}));","map":{"version":3,"sources":["C:/Users/Octavian/Desktop/Dev/planitly-frontend/src/lib/store.ts"],"names":["axios","create","BACKEND_URI","fetchUser","useAuthStore","set","auth","loading","setLoading","useUserState","user","undefined","getUser","data","get","updateUser"],"mappings":"AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,SAAnB;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,SAAT,QAA0B,YAA1B;AASA,OAAO,MAAMC,YAAY,GAAGH,MAAM,CAAYI,GAAG,KAAK;AACpDC,EAAAA,IAAI,EAAE;AACJC,IAAAA,OAAO,EAAE;AADL,GAD8C;AAIpDC,EAAAA,UAAU,EAAED,OAAO,IACjBF,GAAG,CAAC;AACFC,IAAAA,IAAI,EAAE;AACJC,MAAAA,OAAO,EAAEA;AADL;AADJ,GAAD;AAL+C,CAAL,CAAf,CAA3B;AAkBP,OAAO,MAAME,YAAY,GAAGR,MAAM,CAAYI,GAAG,KAAK;AACpDK,EAAAA,IAAI,EAAEC,SAD8C;AAEpDC,EAAAA,OAAO,EAAE,YAAY;AACnB,UAAM;AAAEC,MAAAA,IAAI,EAAEH;AAAR,QAAiB,MAAMV,KAAK,CAACc,GAAN,CAAW,GAAEZ,WAAY,QAAzB,CAA7B;AACAG,IAAAA,GAAG,CAAC;AAAEK,MAAAA,IAAI,EAAEA;AAAR,KAAD,CAAH;AACD,GALmD;AAMpDK,EAAAA,UAAU,EAAE,YAAY;AACtB,UAAML,IAAI,GAAI,MAAMP,SAAS,EAA7B;AACAE,IAAAA,GAAG,CAAC;AAAEK,MAAAA,IAAI,EAAEA;AAAR,KAAD,CAAH;AACD;AATmD,CAAL,CAAf,CAA3B","sourcesContent":["import User from '@/interfaces/user';\nimport axios from 'axios';\nimport create from 'zustand';\nimport { BACKEND_URI } from './constants';\nimport { fetchUser } from './fetchApi';\n\ntype AuthState = {\n  auth: {\n    loading: boolean;\n  };\n  setLoading: (loading: boolean) => void;\n};\n\nexport const useAuthStore = create<AuthState>(set => ({\n  auth: {\n    loading: false,\n  },\n  setLoading: loading =>\n    set({\n      auth: {\n        loading: loading,\n      },\n    }),\n}));\n\ntype UserState = {\n  user: User | undefined;\n  getUser: () => Promise<void>;\n  updateUser: (user: User) => Promise<void>;\n};\n\nexport const useUserState = create<UserState>(set => ({\n  user: undefined,\n  getUser: async () => {\n    const { data: user } = await axios.get(`${BACKEND_URI}/users`);\n    set({ user: user });\n  },\n  updateUser: async () => {\n    const user = (await fetchUser()) as User;\n    set({ user: user });\n  },\n}));\n"]},"metadata":{},"sourceType":"module"}