{"ast":null,"code":"import axios from 'axios';\nimport jwtDecode from 'jwt-decode';\nimport { BACKEND_URI } from './constants';\nimport { redirectToError } from './redirect';\nimport { useUserState } from './store';\nexport function isJwtExpired(jwt) {\n  const now = Date.now().valueOf() / 1000;\n\n  if (typeof jwt.exp !== 'undefined' && jwt.exp < now) {\n    return true;\n  }\n\n  return false;\n}\nexport async function setTokenInLocalStorage(googleTokenId) {\n  try {\n    const {\n      data: token\n    } = await axios.post(`${BACKEND_URI}/auth/google`, {\n      tokenId: googleTokenId\n    });\n    const jwtPayload = jwtDecode(token);\n    console.log(jwtPayload);\n    axios.defaults.headers.common.Authorization = `Bearer ${token}`;\n    localStorage.setItem('token', token);\n    await useUserState.getState().getUser();\n  } catch (error) {\n    console.log(error);\n    redirectToError('setTokenInLocalStorage error');\n  }\n}\n\nfunction isTokenInLocalStorage() {\n  const token = localStorage.getItem('token');\n  if (token) return true;\n  return false;\n}","map":{"version":3,"sources":["C:/Users/Octavian/Desktop/Dev/planitly-frontend/src/lib/jwt.ts"],"names":["axios","jwtDecode","BACKEND_URI","redirectToError","useUserState","isJwtExpired","jwt","now","Date","valueOf","exp","setTokenInLocalStorage","googleTokenId","data","token","post","tokenId","jwtPayload","console","log","defaults","headers","common","Authorization","localStorage","setItem","getState","getUser","error","isTokenInLocalStorage","getItem"],"mappings":"AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,eAAT,QAAgC,YAAhC;AACA,SAASC,YAAT,QAA6B,SAA7B;AAEA,OAAO,SAASC,YAAT,CAAsBC,GAAtB,EAAgD;AACrD,QAAMC,GAAG,GAAGC,IAAI,CAACD,GAAL,GAAWE,OAAX,KAAuB,IAAnC;;AAEA,MAAI,OAAOH,GAAG,CAACI,GAAX,KAAmB,WAAnB,IAAkCJ,GAAG,CAACI,GAAJ,GAAUH,GAAhD,EAAqD;AACnD,WAAO,IAAP;AACD;;AAED,SAAO,KAAP;AACD;AAED,OAAO,eAAeI,sBAAf,CACLC,aADK,EAEU;AACf,MAAI;AACF,UAAM;AAAEC,MAAAA,IAAI,EAAEC;AAAR,QAAkB,MAAMd,KAAK,CAACe,IAAN,CAC3B,GAAEb,WAAY,cADa,EAE5B;AAAEc,MAAAA,OAAO,EAAEJ;AAAX,KAF4B,CAA9B;AAKA,UAAMK,UAAU,GAAGhB,SAAS,CAAaa,KAAb,CAA5B;AAEAI,IAAAA,OAAO,CAACC,GAAR,CAAYF,UAAZ;AAEAjB,IAAAA,KAAK,CAACoB,QAAN,CAAeC,OAAf,CAAuBC,MAAvB,CAA8BC,aAA9B,GAA+C,UAAST,KAAM,EAA9D;AAEAU,IAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BX,KAA9B;AAEA,UAAMV,YAAY,CAACsB,QAAb,GAAwBC,OAAxB,EAAN;AACD,GAfD,CAeE,OAAOC,KAAP,EAAc;AACdV,IAAAA,OAAO,CAACC,GAAR,CAAYS,KAAZ;AAEAzB,IAAAA,eAAe,CAAC,8BAAD,CAAf;AACD;AACF;;AAED,SAAS0B,qBAAT,GAAiC;AAC/B,QAAMf,KAAK,GAAGU,YAAY,CAACM,OAAb,CAAqB,OAArB,CAAd;AAEA,MAAIhB,KAAJ,EAAW,OAAO,IAAP;AAEX,SAAO,KAAP;AACD","sourcesContent":["import JwtPayload from '@/interfaces/jwtPayload';\nimport axios from 'axios';\nimport jwtDecode from 'jwt-decode';\nimport { BACKEND_URI } from './constants';\nimport { redirectToError } from './redirect';\nimport { useUserState } from './store';\n\nexport function isJwtExpired(jwt: JwtPayload): boolean {\n  const now = Date.now().valueOf() / 1000;\n\n  if (typeof jwt.exp !== 'undefined' && jwt.exp < now) {\n    return true;\n  }\n\n  return false;\n}\n\nexport async function setTokenInLocalStorage(\n  googleTokenId: string,\n): Promise<void> {\n  try {\n    const { data: token } = await axios.post<string>(\n      `${BACKEND_URI}/auth/google`,\n      { tokenId: googleTokenId },\n    );\n\n    const jwtPayload = jwtDecode<JwtPayload>(token);\n\n    console.log(jwtPayload);\n\n    axios.defaults.headers.common.Authorization = `Bearer ${token}`;\n\n    localStorage.setItem('token', token as string);\n\n    await useUserState.getState().getUser();\n  } catch (error) {\n    console.log(error);\n\n    redirectToError('setTokenInLocalStorage error');\n  }\n}\n\nfunction isTokenInLocalStorage() {\n  const token = localStorage.getItem('token');\n\n  if (token) return true;\n\n  return false;\n}\n"]},"metadata":{},"sourceType":"module"}